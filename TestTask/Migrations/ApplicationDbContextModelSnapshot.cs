// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestTask.Data;

#nullable disable

namespace TestTask.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "John",
                            Surname = "Smith"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ivan",
                            Surname = "Karpov"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Pavel",
                            Surname = "Doe"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Frank",
                            Surname = "Sidorov"
                        });
                });

            modelBuilder.Entity("TestTask.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("QuantityPublished")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Price = 15.029999999999999,
                            PublishDate = new DateTime(2015, 8, 15, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 1600,
                            Title = "The Red Army"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Price = 4.0,
                            PublishDate = new DateTime(2020, 7, 13, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 10,
                            Title = "Something forbidden"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 2,
                            Price = 6.0,
                            PublishDate = new DateTime(2016, 7, 24, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 100,
                            Title = "Well"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 3,
                            Price = 44.0,
                            PublishDate = new DateTime(2016, 2, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 16203,
                            Title = "Bird in a cage"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 3,
                            Price = 14.029999999999999,
                            PublishDate = new DateTime(2016, 1, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 1640,
                            Title = "Need for speed"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 6,
                            Price = 1521.03,
                            PublishDate = new DateTime(2003, 4, 28, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            QuantityPublished = 11600,
                            Title = "Even coolest story"
                        });
                });

            modelBuilder.Entity("TestTask.Models.Book", b =>
                {
                    b.HasOne("TestTask.Models.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TestTask.Models.Author", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
